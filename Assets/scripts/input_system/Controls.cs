//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/scripts/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""InputActions"",
            ""id"": ""dc55b3ad-de4c-4239-8f0f-e6044b5323da"",
            ""actions"": [
                {
                    ""name"": ""OneTap"",
                    ""type"": ""Button"",
                    ""id"": ""59f07ff1-726c-4d68-a385-dd3063384f78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3dd814bf-a85d-46d2-9272-874f18aa1483"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OneTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad3992cd-7982-4605-9741-9d12c5faec4d"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OneTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputActions
        m_InputActions = asset.FindActionMap("InputActions", throwIfNotFound: true);
        m_InputActions_OneTap = m_InputActions.FindAction("OneTap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputActions
    private readonly InputActionMap m_InputActions;
    private List<IInputActionsActions> m_InputActionsActionsCallbackInterfaces = new List<IInputActionsActions>();
    private readonly InputAction m_InputActions_OneTap;
    public struct InputActionsActions
    {
        private @Controls m_Wrapper;
        public InputActionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OneTap => m_Wrapper.m_InputActions_OneTap;
        public InputActionMap Get() { return m_Wrapper.m_InputActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActionsActions set) { return set.Get(); }
        public void AddCallbacks(IInputActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_InputActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputActionsActionsCallbackInterfaces.Add(instance);
            @OneTap.started += instance.OnOneTap;
            @OneTap.performed += instance.OnOneTap;
            @OneTap.canceled += instance.OnOneTap;
        }

        private void UnregisterCallbacks(IInputActionsActions instance)
        {
            @OneTap.started -= instance.OnOneTap;
            @OneTap.performed -= instance.OnOneTap;
            @OneTap.canceled -= instance.OnOneTap;
        }

        public void RemoveCallbacks(IInputActionsActions instance)
        {
            if (m_Wrapper.m_InputActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_InputActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputActionsActions @InputActions => new InputActionsActions(this);
    public interface IInputActionsActions
    {
        void OnOneTap(InputAction.CallbackContext context);
    }
}
